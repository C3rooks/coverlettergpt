app applyai {
  wasp: {
    version: "^0.9.0"
  },
  title: "CoverLetterGPT",
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {},
      // google: {},
      // gitHub: {}
    },
    onAuthFailedRedirectTo: "/login",
  },
  db: {
    system: PostgreSQL
  },
  client: {
    rootComponent: import App from "@client/App",
  },
  dependencies: [
    ("node-fetch", "3.3.0"),
    ("@chakra-ui/react", "1.8.8"),
    ("react-icons", "4.8.0"),
    ("@emotion/react", "11.10.6"),
    ("@emotion/styled", "11.10.6"),
    ("framer-motion", "6.5.1"),
    ("react-hook-form", "7.43.1"),
    ("pdfjs-dist", "3.3.122"),
    ("@types/pdfjs-dist", "2.10.378"),
    ("react-query", "^3.39.2")
  ],
}

entity User {=psl
  id          Int     @id @default(autoincrement())
  username    String  @unique
  password    String
  letters     CoverLetter[]
  jobs        Job[]
psl=}


entity CoverLetter {=psl
  id         String     @id @default(uuid())
  title      String
  content    String
  tokenUsage Int
  job        Job        @relation(fields: [jobId], references: [id])
  jobId      String
  user       User?      @relation(fields: [userId], references: [id])
  userId     Int?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime?  @updatedAt
psl=}

entity Job {=psl
  id            String         @id @default(uuid())
  title         String
  company       String
  location      String
  description   String
  coverLetter   CoverLetter[]
  user          User?          @relation(fields: [userId], references: [id])
  userId        Int?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  isCompleted   Boolean        @default(false)
psl=}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import Main from "@client/MainPage"
}

route CoverLetterPage { path: "/cover-letter/:id", to: CoverLetterPage }
page CoverLetterPage {
  component: import { CoverLetter } from "@client/CoverLetter"
}


route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/LoginPage"
}

route JobsRoute { path: "/jobs/:id", to: JobsPage }
page JobsPage {
  authRequired: true,
  component: import Jobs from "@client/JobsPage"
}

route ProfileRoute { path: "/profile/:id", to: ProfilePage }
page ProfilePage {
  authRequired: true,
  component: import Profile from "@client/ProfilePage"
}

action generateCoverLetter {
  fn: import { generateCoverLetter } from "@server/actions.js",
  entities: [CoverLetter]
}

action createJob {
  fn: import { createJob } from "@server/actions.js",
  entities: [Job]
}

action updateJob {
  fn: import { updateJob } from "@server/actions.js",
  entities: [Job]
}

action updateCoverLetter {
  fn: import { updateCoverLetter } from "@server/actions.js",
  entities: [Job, CoverLetter]
}

query getJobs {
  fn: import { getJobs } from "@server/queries.js",
  entities: [Job]
}

query getJob {
  fn: import { getJob } from "@server/queries.js",
  entities: [Job]
}

query getCoverLetter {
  fn: import { getCoverLetter } from "@server/queries.js",
  entities: [CoverLetter]
}

query getCoverLetters {
  fn: import { getCoverLetters } from "@server/queries.js",
  entities: [CoverLetter]
}
